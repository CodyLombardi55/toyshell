#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ALIASES 10
#define MAX_ALIAS_LENGTH 50
#define MAX_INPUT_LENGTH 100

struct Alias {
    char new_name[MAX_ALIAS_LENGTH];
    char old_name[MAX_ALIAS_LENGTH];
};

struct Alias alias_list[MAX_ALIASES];
int alias_count = 0;
char shell_name[MAX_ALIAS_LENGTH] = "myshell";
char terminator[MAX_ALIAS_LENGTH] = ">";

void parse_command(char *input) {
    // Split input into tokens
    char *tokens[MAX_ALIAS_LENGTH];
    int count = 0;
    char *token = strtok(input, " \n");
    while (token != NULL && count < MAX_ALIAS_LENGTH) {
        tokens[count] = token;
        count++;
        token = strtok(NULL, " \n");
    }
    tokens[count] = NULL;

    // Check for built-in commands
    if (strcmp(tokens[0], "STOP:") == 0) {
        printf("Exiting myshell session.\n");
        exit(0);
    } else if (strcmp(tokens[0], "SETSHELLNAME") == 0 && tokens[1] != NULL) {
        strcpy(shell_name, tokens[1]);
        printf("Shell name set to %s\n", shell_name);
    } else if (strcmp(tokens[0], "SETTERMINATOR") == 0 && tokens[1] != NULL) {
        strcpy(terminator, tokens[1]);
        printf("Terminator set to %s\n", terminator);
    } else if (strcmp(tokens[0], "NEWNAME") == 0 && tokens[1] != NULL) {
        if (alias_count < MAX_ALIASES) {
            strcpy(alias_list[alias_count].new_name, tokens[1]);
            if (tokens[2] != NULL) {
                strcpy(alias_list[alias_count].old_name, tokens[2]);
            } else {
                alias_list[alias_count].old_name[0] = '\0';
            }
            alias_count++;
            printf("Alias added: %s -> %s\n", alias_list[alias_count - 1].new_name, alias_list[alias_count - 1].old_name);
        } else {
            printf("Alias list is full. Cannot add more aliases.\n");
        }
    } else if (strcmp(tokens[0], "LISTNEWNAMES") == 0) {
        printf("Aliases:\n");
        for (int i = 0; i < alias_count; ++i) {
            printf("%s %s\n", alias_list[i].new_name, alias_list[i].old_name);
        }
    } else if (strcmp(tokens[0], "SAVENEWNAMES") == 0 && tokens[1] != NULL) {
        FILE *file = fopen(tokens[1], "w");
        if (file == NULL) {
            printf("Error: Could not open file for writing.\n");
        } else {
            for (int i = 0; i < alias_count; ++i) {
                fprintf(file, "%s %s\n", alias_list[i].new_name, alias_list[i].old_name);
            }
            fclose(file);
            printf("Aliases saved to %s\n", tokens[1]);
        }
    } else if (strcmp(tokens[0], "READNEWNAMES") == 0 && tokens[1] != NULL) {
        FILE *file = fopen(tokens[1], "r");
        if (file == NULL) {
            printf("Error: Could not open file for reading.\n");
        } else {
            alias_count = 0;
            while (fscanf(file, "%s %s", alias_list[alias_count].new_name, alias_list[alias_count].old_name) != EOF) {
                alias_count++;
            }
            fclose(file);
            printf("Aliases loaded from %s\n", tokens[1]);
        }
    } else if (strcmp(tokens[0], "HELP") == 0) {
        printf("Available commands:\n");
        printf("STOP: Terminates execution of the current %s session.\n", shell_name);
        printf("SETSHELLNAME <shell_name>: Sets the shell name to <shell_name>.\n");
        printf("SETTERMINATOR <terminator>: Sets the terminator to <terminator>.\n");
        printf("NEWNAME <new_name> | <new_name> <old_name>: Manages aliases.\n");
        printf("LISTNEWNAMES: Outputs all the aliases.\n");
        printf("SAVENEWNAMES <file_name>: Stores aliases in <file_name>.\n");
        printf("READNEWNAMES <file_name>: Reads aliases from <file_name>.\n");
        printf("<UNIX_command>: Executes the UNIX command <UNIX_command>.\n");
        printf("HELP: Shows all built-in commands supported by %s.\n", shell_name);
    } else {
        // Check if it's an alias
        for (int i = 0; i < alias_count; ++i) {
            if (strcmp(tokens[0], alias_list[i].new_name) == 0) {
                if (alias_list[i].old_name[0] != '\0') {
                    tokens[0] = alias_list[i].old_name;
                } else {
                    printf("Error: Alias %s has no command assigned.\n", alias_list[i].new_name);
                    return;
                }
                break;
            }
        }
        // Execute the command
        int pid = fork();
        if (pid == 0) {
            // Child process
            if (execvp(tokens[0], tokens) == -1) {
                printf("Error: Command execution failed.\n");
            }
            exit(0);
        } else if (pid < 0) {
            // Forking error
            printf("Error: Forking failed.\n");
        } else {
            // Parent process
            wait(NULL);
        }
    }
}

int main() {
    char input[MAX_INPUT_LENGTH];
    printf("%s%s ", shell_name, terminator);
    while (fgets(input, sizeof(input), stdin) != NULL) {
        parse_command(input);
        printf("%s%s ", shell_name, terminator);
    }
    return 0;
}
